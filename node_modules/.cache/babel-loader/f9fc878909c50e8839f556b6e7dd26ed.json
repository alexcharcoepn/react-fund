{"ast":null,"code":"var _jsxFileName = \"/home/alexander/Desktop/github/React/react-fund/src/Components/Loop.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport \"../App.css\";\nimport Filter from './Filter';\nimport ListItem from './ListItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst URL = \"https://api.themoviedb.org/3/discover/movie?api_key=40c432e4dea1ea50718a0416a2bf27cf&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1\";\nconst confURL = \"https://api.themoviedb.org/3/configuration?api_key=\";\n\nfunction Loop({\n  data\n}) {\n  _s();\n\n  const [filter, setFilter] = useState(\"\");\n  const [movies, setMovies] = useState([]);\n  const [config, setConfig] = useState({});\n  const ulRef = useRef(null);\n\n  const getMovies = async () => {\n    try {\n      const res = await fetch(URL);\n      const mov = await res.json();\n      setMovies(mov.results);\n      console.log(mov.results, movies);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const getConfig = async () => {\n    try {\n      const res = await fetch(confURL);\n      const con = await res.json();\n      setConfig(con);\n    } catch (e) {\n      console.error(e);\n    }\n  }; //IN this case, every single time a render gets update -> effect's fired\n  //we can tell useEffect, when to run\n\n\n  useEffect(() => {\n    getMovies();\n  }, []);\n  useEffect(() => {\n    getConfig();\n  }, []); //this array is the efect dependency, tell when to run\n  //As empty, it will run only at first render\n  //usinf ',[filter]', will run when filter is updated    \n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: ulRef,\n    children: [/*#__PURE__*/_jsxDEV(Filter, {\n      filter: filter,\n      setFilter: setFilter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"movies-list\",\n      children: //Filtering with input, for each time array filter a contins, those\n      //will pass to the map function\n      movies.filter(item => {\n        return item.title.toLowerCase().includes(filter.toLowerCase());\n      }).map(item => {\n        return /*#__PURE__*/_jsxDEV(ListItem, {\n          id: item.id,\n          title: item.title,\n          config: config,\n          poster_path: item.poster_path\n        }, item.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 28\n        }, this); //     return(  <li key={item}>{item}</li>)\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Loop, \"RuD1fPtjxB4ZPd42zF6Xob8kQOY=\");\n\n_c = Loop;\nexport default Loop; //RE-RENDER A COMPONENT\n//a state change, a props change\n//useEffect(): trigger side effects,\n\nvar _c;\n\n$RefreshReg$(_c, \"Loop\");","map":{"version":3,"sources":["/home/alexander/Desktop/github/React/react-fund/src/Components/Loop.js"],"names":["React","useState","useRef","useEffect","Filter","ListItem","URL","confURL","Loop","data","filter","setFilter","movies","setMovies","config","setConfig","ulRef","getMovies","res","fetch","mov","json","results","console","log","e","error","getConfig","con","item","title","toLowerCase","includes","map","id","poster_path"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAuBC,MAAvB,EAA8BC,SAA9B,QAA8C,OAA9C;AACA,OAAO,YAAP;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,MAAMC,GAAG,GAAC,4KAAV;AACA,MAAMC,OAAO,GAAC,qDAAd;;AAGA,SAASC,IAAT,CAAc;AAACC,EAAAA;AAAD,CAAd,EAAsB;AAAA;;AAElB,QAAM,CAACC,MAAD,EAAQC,SAAR,IAAmBV,QAAQ,CAAC,EAAD,CAAjC;AACA,QAAM,CAACW,MAAD,EAAQC,SAAR,IAAmBZ,QAAQ,CAAC,EAAD,CAAjC;AACA,QAAM,CAACa,MAAD,EAAQC,SAAR,IAAmBd,QAAQ,CAAC,EAAD,CAAjC;AAEA,QAAMe,KAAK,GAACd,MAAM,CAAC,IAAD,CAAlB;;AAEA,QAAMe,SAAS,GAAC,YAAS;AACrB,QAAG;AACC,YAAMC,GAAG,GAAE,MAAMC,KAAK,CAACb,GAAD,CAAtB;AACA,YAAMc,GAAG,GAAC,MAAMF,GAAG,CAACG,IAAJ,EAAhB;AACAR,MAAAA,SAAS,CAACO,GAAG,CAACE,OAAL,CAAT;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAG,CAACE,OAAhB,EAAwBV,MAAxB;AACH,KALD,CAKC,OAAOa,CAAP,EAAS;AACNF,MAAAA,OAAO,CAACG,KAAR,CAAcD,CAAd;AACH;AACJ,GATD;;AAWA,QAAME,SAAS,GAAC,YAAS;AACrB,QAAG;AACC,YAAMT,GAAG,GAAE,MAAMC,KAAK,CAACZ,OAAD,CAAtB;AACA,YAAMqB,GAAG,GAAC,MAAMV,GAAG,CAACG,IAAJ,EAAhB;AACAN,MAAAA,SAAS,CAACa,GAAD,CAAT;AACH,KAJD,CAIC,OAAOH,CAAP,EAAS;AACNF,MAAAA,OAAO,CAACG,KAAR,CAAcD,CAAd;AACH;AACJ,GARD,CAnBkB,CA6BlB;AACA;;;AAEAtB,EAAAA,SAAS,CAAC,MAAI;AACVc,IAAAA,SAAS;AACZ,GAFQ,EAEP,EAFO,CAAT;AAIAd,EAAAA,SAAS,CAAC,MAAI;AACVwB,IAAAA,SAAS;AACZ,GAFQ,EAEP,EAFO,CAAT,CApCkB,CAwClB;AACA;AACA;;AAEA,sBACI;AAAK,IAAA,GAAG,EAAEX,KAAV;AAAA,4BAEC,QAAC,MAAD;AAAQ,MAAA,MAAM,EAAEN,MAAhB;AAAwB,MAAA,SAAS,EAAEC;AAAnC;AAAA;AAAA;AAAA;AAAA,YAFD,eAGI;AAAI,MAAA,SAAS,EAAE,aAAf;AAAA,gBAEI;AACA;AACAC,MAAAA,MAAM,CAACF,MAAP,CAAemB,IAAD,IAAQ;AAClB,eAAOA,IAAI,CAACC,KAAL,CAAWC,WAAX,GAAyBC,QAAzB,CAAkCtB,MAAM,CAACqB,WAAP,EAAlC,CAAP;AACH,OAFD,EAEGE,GAFH,CAEQJ,IAAD,IAAQ;AACZ,4BAAQ,QAAC,QAAD;AAAwB,UAAA,EAAE,EAAEA,IAAI,CAACK,EAAjC;AAAqC,UAAA,KAAK,EAAEL,IAAI,CAACC,KAAjD;AAAwD,UAAA,MAAM,EAAEhB,MAAhE;AAAwE,UAAA,WAAW,EAAEe,IAAI,CAACM;AAA1F,WAAeN,IAAI,CAACK,EAApB;AAAA;AAAA;AAAA;AAAA,gBAAR,CADY,CAEjB;AACG,OALD;AAJJ;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAkBH;;GA9DQ1B,I;;KAAAA,I;AAgET,eAAeA,IAAf,C,CAGA;AACA;AAEA","sourcesContent":["import React,{useState,useRef,useEffect} from 'react'\nimport \"../App.css\"\nimport Filter from './Filter'\nimport ListItem from './ListItem'\n\nconst URL=\"https://api.themoviedb.org/3/discover/movie?api_key=40c432e4dea1ea50718a0416a2bf27cf&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1\"\nconst confURL=\"https://api.themoviedb.org/3/configuration?api_key=\"\n    \n\nfunction Loop({data}) {\n    \n    const [filter,setFilter]=useState(\"\")\n    const [movies,setMovies]=useState([])\n    const [config,setConfig]=useState({})\n\n    const ulRef=useRef(null)\n\n    const getMovies=async()=>{\n        try{\n            const res= await fetch(URL)\n            const mov=await res.json()\n            setMovies(mov.results)\n            console.log(mov.results,movies)\n        }catch (e){\n            console.error(e)\n        }\n    }\n\n    const getConfig=async()=>{\n        try{\n            const res= await fetch(confURL)\n            const con=await res.json()\n            setConfig(con)\n        }catch (e){\n            console.error(e)\n        }\n    }\n\n    //IN this case, every single time a render gets update -> effect's fired\n    //we can tell useEffect, when to run\n     \n    useEffect(()=>{\n        getMovies();\n    },[]);\n\n    useEffect(()=>{\n        getConfig();\n    },[])\n\n    //this array is the efect dependency, tell when to run\n    //As empty, it will run only at first render\n    //usinf ',[filter]', will run when filter is updated    \n\n    return (\n        <div ref={ulRef}> \n         \n         <Filter filter={filter} setFilter={setFilter}/>\n            <ul className={\"movies-list\"}>\n            {\n                //Filtering with input, for each time array filter a contins, those\n                //will pass to the map function\n                movies.filter((item)=>{\n                    return item.title.toLowerCase().includes(filter.toLowerCase())\n                }).map((item)=>{\n                   return( <ListItem key={item.id} id={item.id} title={item.title} config={config} poster_path={item.poster_path}/>)\n              //     return(  <li key={item}>{item}</li>)\n                })\n            }\n            </ul>\n        </div>\n    )\n}\n\nexport default Loop\n\n\n//RE-RENDER A COMPONENT\n//a state change, a props change\n\n//useEffect(): trigger side effects,"]},"metadata":{},"sourceType":"module"}